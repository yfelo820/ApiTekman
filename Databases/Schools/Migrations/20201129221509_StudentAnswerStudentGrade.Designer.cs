// <auto-generated />
using System;
using Api.Databases.Schools;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Databases.Schools.Migrations
{
    [DbContext(typeof(SchoolsDbContext))]
    [Migration("20201129221509_StudentAnswerStudentGrade")]
    partial class StudentAnswerStudentGrade
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Api.Entities.Schools.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AccessAllCourses");

                    b.Property<bool>("AccessAllSessions");

                    b.Property<bool>("AccessFromHome");

                    b.Property<int>("Course");

                    b.Property<bool>("FirstSessionWithDiagnosis");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<string>("LanguageKey")
                        .IsRequired();

                    b.Property<int>("LimitCourse");

                    b.Property<int>("LimitSession");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("ParentRating");

                    b.Property<string>("SchoolId")
                        .IsRequired();

                    b.Property<string>("SubjectKey")
                        .IsRequired();

                    b.Property<Guid?>("TkGroupId");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasName("Index_Group_UniqueKey");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Api.Entities.Schools.ParentFeedbackAnswerSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnswerValue1");

                    b.Property<int>("AnswerValue2");

                    b.Property<int>("AnswerValue3");

                    b.Property<int>("AnswerValue4");

                    b.Property<int>("AnswerValue5");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("FulfillmentDate");

                    b.Property<string>("ParentEmail");

                    b.Property<Guid>("QuestionSetId");

                    b.Property<string>("QuestionText1")
                        .IsRequired();

                    b.Property<string>("QuestionText2")
                        .IsRequired();

                    b.Property<string>("QuestionText3")
                        .IsRequired();

                    b.Property<string>("QuestionText4")
                        .IsRequired();

                    b.Property<string>("QuestionText5")
                        .IsRequired();

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("FeedbackAnswerSet");
                });

            modelBuilder.Entity("Api.Entities.Schools.ParentFeedbackQuestionSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("QuestionLabel1")
                        .IsRequired();

                    b.Property<string>("QuestionLabel2")
                        .IsRequired();

                    b.Property<string>("QuestionLabel3")
                        .IsRequired();

                    b.Property<string>("QuestionLabel4")
                        .IsRequired();

                    b.Property<string>("QuestionLabel5")
                        .IsRequired();

                    b.Property<string>("QuestionSetType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("FeedbackQuestionSet");
                });

            modelBuilder.Entity("Api.Entities.Schools.PendingParentFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRead");

                    b.Property<DateTime>("RequestTime");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PendingFeedback");
                });

            modelBuilder.Entity("Api.Entities.Schools.SsoIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("IdToken");

                    b.HasKey("Id");

                    b.ToTable("SsoIdentity");
                });

            modelBuilder.Entity("Api.Entities.Schools.StudentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActivityContentBlockId");

                    b.Property<int>("ActivityDifficulty");

                    b.Property<int>("ActivitySession");

                    b.Property<int>("Course");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<float>("Grade");

                    b.Property<bool>("IsSentToTkReports");

                    b.Property<string>("LanguageKey")
                        .HasColumnType("VARCHAR(8)")
                        .HasMaxLength(8);

                    b.Property<int>("Level");

                    b.Property<int>("Session");

                    b.Property<int>("Stage");

                    b.Property<float>("StudentGrade");

                    b.Property<string>("SubjectKey")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UserName")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserName", "SubjectKey", "LanguageKey")
                        .HasName("Index_StudentAnswer_UserNameSubjectLang");

                    b.ToTable("StudentAnswer");
                });

            modelBuilder.Entity("Api.Entities.Schools.StudentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessNumber");

                    b.Property<Guid>("GroupId");

                    b.Property<Guid?>("TkStudentId");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GroupId", "AccessNumber")
                        .IsUnique()
                        .HasName("Index_StudentGroup_UniqueAccessNumber");

                    b.HasIndex("GroupId", "UserName")
                        .IsUnique()
                        .HasName("Index_StudentGroup_UniqueStudentGroup");

                    b.ToTable("StudentGroup");
                });

            modelBuilder.Entity("Api.Entities.Schools.StudentProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Course");

                    b.Property<int>("DiagnosisTestState");

                    b.Property<string>("LanguageKey");

                    b.Property<int>("Session");

                    b.Property<string>("SubjectKey");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("UserName", "SubjectKey", "LanguageKey")
                        .IsUnique()
                        .HasName("Index_StudentProgress_UniqueSubject")
                        .HasFilter("[UserName] IS NOT NULL AND [SubjectKey] IS NOT NULL AND [LanguageKey] IS NOT NULL");

                    b.ToTable("StudentProgress");
                });

            modelBuilder.Entity("Api.Entities.Schools.StudentGroup", b =>
                {
                    b.HasOne("Api.Entities.Schools.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
